name: Auto Parse github form - master
run-name: ${{ github.actor }} - issue:${{ github.event.issue.number }}
on:
  issues:
    types:
      - opened
      - edited
      - labeled
      - reopened
  workflow_dispatch:
env:
  GH_TOKEN: ${{ secrets.ORG_PROJECT_PAT }}
  GH_REPO: ${{ github.repository }}
  NUMBER: ${{ github.event.issue.number }}
permissions:
  id-token: write

jobs:
  process-request:
    permissions: write-all
    runs-on: ubuntu-latest
    if: github.event.issue.user.login != 'renovate[bot]' && github.actor != 'hmcts-platform-operations' && !contains(github.event.issue.labels.*.name, 'pull-request')
    steps:
      #Allows workflow to access repo
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          # token: ${{ env.GH_TOKEN }}
      #Get issue body
      - name: Get issue body
        id: get_issue_body
        run: |
          gh issue view --repo thomasthorntoncloud/test-auto-shutdown ${{ github.event.issue.number }} --json body | jq -r '.body' > body.txt
          sed -i "s/'//g" body.txt 
          cat body.txt

        env:
          GH_TOKEN: ${{ github.token }}

      - name: Extract dates and exclusion
        id: extract_values
        run: |
          START_DATE=$(sed -n '/^### Skip shutdown start date/,/^###/p' body.txt | tail -n +2 | head -n -1 | tr -d '[:space:]')
          END_DATE=$(sed -n '/^### Skip shutdown end date/,/^###/p' body.txt | tail -n +2 | head -n -1 | tr -d '[:space:]')
          PAST_11PM=$(sed -n '/^### Do you need this exclusion past 11pm?/,$p' body.txt | tail -n +2 | sed '/^###/d' | xargs)
          
          echo "start_date=$START_DATE" >> $GITHUB_OUTPUT
          echo "end_date=$END_DATE" >> $GITHUB_OUTPUT
          echo "past_11pm=$PAST_11PM" >> $GITHUB_OUTPUT

          BUSINESS_AREA=$(sed -n '/^### Business area/,/^###/p' body.txt | tail -n +2 | head -n -1 | tr -d '[:space:]')
          TEAM_NAME=$(sed -n '/^### Team\/Application Name/,/^###/p' body.txt | tail -n +2 | head -n -1 | tr -d '[:space:]')
          ENVIRONMENTS_REQUESTED=$(sed -n '/^### Environment/,/^###/p' body.txt | tail -n +2 | head -n -1 | tr -d '[:space:]')
          PAST_11PM=$(sed -n '/^### Do you need this exclusion past 11pm?/,$p' body.txt | tail -n +2 | sed '/^###/d' | xargs)

          echo "business_area=$BUSINESS_AREA" >> $GITHUB_OUTPUT
          echo "team_name=$TEAM_NAME" >> $GITHUB_OUTPUT
          echo "environments_requested=$ENVIRONMENTS_REQUESTED" >> $GITHUB_OUTPUT
          echo "past_11pm=$PAST_11PM" >> $GITHUB_OUTPUT

      - name: Use extracted values
        run: |
          echo "Start Date: ${{ steps.extract_values.outputs.start_date }}"
          echo "End Date: ${{ steps.extract_values.outputs.end_date }}"
          echo "Past 11pm: ${{ steps.extract_values.outputs.past_11pm }}"
          echo "Business Area: ${{ steps.extract_values.outputs.business_area }}"
          echo "Team Name: ${{ steps.extract_values.outputs.team_name }}"
          echo "Environments Requested: ${{ steps.extract_values.outputs.environments_requested }}"
          echo "Past 11pm: ${{ steps.extract_values.outputs.past_11pm }}"

      - name: Update GitHub Project
        run: |
          # Get project ID
          PROJECT_ID=$(gh api graphql -f query='
            query($org: String!, $num: Int!) {
              organization(login: $org) { projectV2(number: $num) { id } }
            }' -f org="thomasthorntoncloud" -F num=2 -q '.data.organization.projectV2.id')

          echo "PROJECT_ID: $PROJECT_ID"

          # Get issue ID and number
          ISSUE_ID=$(gh api graphql -f query='
            query($owner: String!, $repo: String!, $number: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $number) {
                  id
                }
              }
            }' -f owner="thomasthorntoncloud" -f repo="test-auto-shutdown" -F number=${{ github.event.issue.number }} -q '.data.repository.issue.id')

          echo "ISSUE_ID: $ISSUE_ID"

          # Add the issue to the project and get the item ID
          ITEM_ID=$(gh api graphql -f query='
            mutation($projectId: ID!, $contentId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) {
                item {
                  id
                }
              }
            }' -f projectId=$PROJECT_ID -f contentId=$ISSUE_ID -q '.data.addProjectV2ItemById.item.id')

          echo "ITEM_ID: $ITEM_ID"

          # Get field IDs
          FIELDS=$(gh api graphql -f query='
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2Field {
                        id
                        name
                        dataType
                      }
                      ... on ProjectV2IterationField {
                        id
                        name
                        dataType
                      }
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        dataType
                      }
                    }
                  }
                }
              }
            }' -f projectId=$PROJECT_ID -q '.data.node.fields.nodes')

          echo "All fields:"
          echo "$FIELDS" | jq '.'

          # Extract StartDate and EndDate field IDs
          START_DATE_FIELD_ID=$(echo "$FIELDS" | jq -r '.[] | select(.name == "StartDate") | .id')
          END_DATE_FIELD_ID=$(echo "$FIELDS" | jq -r '.[] | select(.name == "EndDate") | .id')

          echo "StartDate Field ID: $START_DATE_FIELD_ID"
          echo "EndDate Field ID: $END_DATE_FIELD_ID"

          # Check if field IDs are empty
          if [ -z "$START_DATE_FIELD_ID" ] || [ -z "$END_DATE_FIELD_ID" ]; then
            echo "Error: Could not find StartDate or EndDate fields. Please check the field names in your project."
            exit 1
          fi

          # Convert dates to ISO 8601 format
          convert_date() {
            local input_date="$1"
            local day=$(echo $input_date | cut -d'-' -f1)
            local month=$(echo $input_date | cut -d'-' -f2)
            local year=$(echo $input_date | cut -d'-' -f3)
            echo "$year-$month-$day"
          }

          START_DATE=$(convert_date "${{ steps.extract_values.outputs.start_date }}")
          END_DATE=$(convert_date "${{ steps.extract_values.outputs.end_date }}")

          echo "Converted Start Date: $START_DATE"
          echo "Converted End Date: $END_DATE"

          # Update StartDate
          gh api graphql -f query='
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: Date!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId
                itemId: $itemId
                fieldId: $fieldId
                value: { date: $date }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f projectId=$PROJECT_ID -f itemId=$ITEM_ID -f fieldId=$START_DATE_FIELD_ID -f date=$START_DATE

          # Update EndDate
          gh api graphql -f query='
            mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $date: Date!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId
                itemId: $itemId
                fieldId: $fieldId
                value: { date: $date }
              }) {
                projectV2Item {
                  id
                }
              }
            }' -f projectId=$PROJECT_ID -f itemId=$ITEM_ID -f fieldId=$END_DATE_FIELD_ID -f date=$END_DATE

          echo "Project update completed"
        env:
          GH_TOKEN: ${{ secrets.ORG_PROJECT_PAT }}

      - name: Update issue title
        run: |
          # Get the current title
          CURRENT_TITLE=$(gh issue view ${{ github.event.issue.number }} --json title -q .title)

          # Check if past 11pm is requested
          if [[ "${{ steps.extract_values.outputs.past_11pm }}" == "No" ]]; then
              PAST_11PM="ðŸ•’"
            else
              PAST_11PM=""
          fi

          # Check for cancelled label and echo "hello"
          if [[ " ${GITHUB_EVENT_LABELS[*]} " == *" cancel "* ]]; then
              CANCEL="ðŸš«"
            else
              CANCEL=""
          fi

          # Prepare the new information to append
          NEW_INFO="${{ steps.extract_values.outputs.business_area }} - ${{ steps.extract_values.outputs.team_name }} - ${{ steps.extract_values.outputs.environments_requested }} $PAST_11PM $CANCEL"

          # Check if the title already contains the new information
          if [[ "$CURRENT_TITLE" != *"$NEW_INFO"* ]]; then
            # Append to the title only if it doesn't already contain the new information
            NEW_TITLE="${CURRENT_TITLE} - ${NEW_INFO}"

            # Update the issue with the new title
            gh issue edit ${{ github.event.issue.number }} --title "$NEW_TITLE"

            echo "Updated issue title to: $NEW_TITLE"
          else
            echo "Title already contains the required information. No update needed."
          fi
        env:
          GH_TOKEN: ${{ secrets.ORG_PROJECT_PAT }}